// <auto-generated />
using System;
using Checkout.PaymentGateway.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Checkout.PaymentGateway.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Checkout.PaymentGateway.Data.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("id");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cardNumber");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("clientId");

                    b.Property<string>("Cvc")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("cvc");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("expirationDate");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("ClientId");

                    b.ToTable("card", "dbo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("42d6f985-096a-4697-8d93-6e28e5a822e9"),
                            CardNumber = "BpxgZtx/WIo7W6xK9MvmWrely+IMe1vBYDunBVGJLdc=",
                            ClientId = new Guid("5c032979-8fb2-443a-8667-6b29cf02ecc2"),
                            Cvc = "111",
                            ExpirationDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Checkout.PaymentGateway.Data.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("firstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("lastName");

                    b.HasKey("Id")
                        .IsClustered();

                    b.ToTable("client", "dbo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5c032979-8fb2-443a-8667-6b29cf02ecc2"),
                            FirstName = "John",
                            LastName = "Doe"
                        });
                });

            modelBuilder.Entity("Checkout.PaymentGateway.Data.Merchant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("MerchantUniqueToken")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("merchantUniqueToken");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .IsClustered();

                    b.ToTable("merchant", "dbo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("745be9cf-7c3f-4c51-b91b-2c8c037c67de"),
                            MerchantUniqueToken = new Guid("8f9e6b51-3eb3-4025-a96f-4343a591bf1f"),
                            Name = "Merchant"
                        });
                });

            modelBuilder.Entity("Checkout.PaymentGateway.Data.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<Guid>("BankOperationId")
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("bankOperationId");

                    b.Property<Guid>("CardId")
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("cardId");

                    b.Property<Guid>("MerchantId")
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("merchantId");

                    b.Property<byte>("PaymentStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("paymentStatus");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("timeStamp");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("CardId");

                    b.HasIndex("MerchantId");

                    b.ToTable("payment", "dbo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7c0d6f2b-3899-485d-ad6b-6c22d6ee6750"),
                            Amount = 22.60m,
                            BankOperationId = new Guid("fbc9d5ea-239a-48f3-a6bc-8adda6507e04"),
                            CardId = new Guid("42d6f985-096a-4697-8d93-6e28e5a822e9"),
                            MerchantId = new Guid("745be9cf-7c3f-4c51-b91b-2c8c037c67de"),
                            PaymentStatus = (byte)2,
                            TimeStamp = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Checkout.PaymentGateway.Data.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<string>("CardHolderName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cardHolderName");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cardNumber");

                    b.Property<string>("Cvc")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cvc");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expirationDate");

                    b.Property<Guid>("MerchantUniqueToken")
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("merchantUniqueToken");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("status");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("timeStamp");

                    b.HasKey("Id")
                        .IsClustered();

                    b.ToTable("request", "dbo");
                });

            modelBuilder.Entity("Checkout.PaymentGateway.Data.Card", b =>
                {
                    b.HasOne("Checkout.PaymentGateway.Data.Client", "Client")
                        .WithMany("Cards")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Checkout.PaymentGateway.Data.Payment", b =>
                {
                    b.HasOne("Checkout.PaymentGateway.Data.Card", "Card")
                        .WithMany("Payments")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Checkout.PaymentGateway.Data.Merchant", "Merchant")
                        .WithMany("Payments")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Checkout.PaymentGateway.Data.Card", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Checkout.PaymentGateway.Data.Client", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("Checkout.PaymentGateway.Data.Merchant", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
